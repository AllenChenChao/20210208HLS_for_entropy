#include<iostream>
#include<math.h>
#define length 29
int main()
{
    int a[length] = {4, 10, 9, 17, 15, 11, 0, 7, 27, 16, 28, 26, 23, 21, 19, 5, 6, 2, 8, 25, 22, 13, 12, 1, 3, 24, 18, 14, 20};
    int location_a[length] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28};
    int b[length];
    int location_b[length];
    int i = 0;
    int j = 0;
    int n  = length;
    int len_seg = 1;
    int Loop = 5;
    int tmp = 0;
    int limit_i,limit_j;
    int flag = 0;
    for(int loop = 0; loop < Loop;loop++){
        for(int itera=0; itera < ceil((float)n/2/len_seg);itera++){
            i = 2*itera*len_seg;
            j = (2*itera+1)*len_seg;
            limit_i = (2*itera+1)*len_seg;
            limit_j = 2*(itera+1)*len_seg;
            if(flag == 0){
                while( i < limit_i & i < length & j < limit_j & j < length ){
                    if(a[i] < a[j]){
                        b[i+j-2*itera*len_seg-len_seg] = a[i];
                        location_b[i+j-2*itera*len_seg-len_seg] = location_a[i];
                        i = i + 1;
                    }
                    else{
                        b[i+j-2*itera*len_seg-len_seg] = a[j];
                        location_b[i+j-2*itera*len_seg-len_seg] = location_a[j];
                        j = j + 1;           
                    }
                }
                while(i < limit_i & i < length){
                    b[i+j-2*itera*len_seg-len_seg] = a[i];
                    location_b[i+j-2*itera*len_seg-len_seg] = location_a[i];
                    i = i + 1;                   
                }
                while(j < limit_j & j < length){
                    b[i+j-2*itera*len_seg-len_seg] = a[j];
                    location_b[i+j-2*itera*len_seg-len_seg] = location_a[j];
                    j = j + 1;                    
                }
            }
            else {
                while( i < limit_i & i < length & j < limit_j & j < length ){
                    if(b[i] < b[j]){
                        a[i+j-2*itera*len_seg-len_seg] = b[i];
                        location_a[i+j-2*itera*len_seg-len_seg] = location_b[i];
                        i = i + 1;
                    }
                    else{
                        a[i+j-2*itera*len_seg-len_seg] = b[j];
                        location_a[i+j-2*itera*len_seg-len_seg] = location_b[j];
                        j = j + 1;           
                    }
                }
                while(i < limit_i & i < length){
                    a[i+j-2*itera*len_seg-len_seg] = b[i];
                    location_a[i+j-2*itera*len_seg-len_seg] = location_b[i];
                    i = i + 1;                   
                }
                while(j < limit_j & j < length){
                    a[i+j-2*itera*len_seg-len_seg] = b[j];
                    location_a[i+j-2*itera*len_seg-len_seg] = location_b[j];
                    j = j + 1;                    
                }                
            }       
        }
        if (flag == 0) flag = 1;
        else flag = 0;
        len_seg = 2 * len_seg;
    }
    std::cout<<"####################"<<std::endl;
    if (Loop % 2 == 0){
        for(i = 0; i < n ; ++i){
            std::cout<<i<<'-'<<a[i]<<'-'<<location_a[i]<<std::endl;
        }
    }

    else{
        for(i = 0; i < n ; ++i){
            std::cout<<i<<'-'<<b[i]<<'-'<<location_b[i]<<std::endl;
        }        
    }
}

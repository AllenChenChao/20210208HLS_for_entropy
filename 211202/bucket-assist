'''
version 1, 全匹配。14-2 passed
'''
data = [0.9, 0.6, 0.5, 0.95, 0.85, 0.7, 0.8, 1.1, 0.7]
r = 0.21
m = 2
X =  [sum(data[i:i+m]) for i in range(len(data)-m+1)]
X = [i - min(X) + 1 for i in X]     #why should we +1 ? if not? try it later
''' alternative choice: without + 1 ,Nb = 4 here!
X = [i - min(X) for i in X]     #why should we +1 ? if not !!!
Nb = math.ceil(max(X)/r)  #Nb = 4, 
'''
# r_split = 2
Nb = math.ceil(max(X)/r)
B = [math.ceil(i/r) for i in X]
bucket = [[] for i in range(Nb)]
for i in range(len(B)):
    bucket[B[i]-1].append(i)
count = 0
for i in range(Nb):
    for j in range(max(i-2,0),min(i+3,Nb)):  #原先的bucket通常只计算比自己小的匹配，我们都计算了，我们允许（1,3），（3,1）这类的存在
#     for j in range(max(i-2,0),i+1):#standard  
        for k in bucket[i]:
            for g in bucket[j]:
                if k!=g:
                    for t in range(m):
                        if not(abs(data[k+t]-data[g+t])< r):
                            break
                    else:
#                         print(k,g)  #y用于测试
                        count = count+1
    #                 count = count + sum(abs(data[k+t]-data[g+t])<r for t in range(m))

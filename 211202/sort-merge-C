#include<iostream>
#include<math.h>
#define length 1000
int main()
{
    int a[length] = {902, 370, 946, 163, 711, 172, 477, 168, 496, 426, 488, 868, 191, 519, 689, 625, 851, 373, 905, 354, 783, 196, 51, 817, 679, 145, 302, 0, 399, 188, 803, 860, 58, 938, 376, 791, 866, 809, 684, 765, 742, 935, 349, 507, 599, 603, 780, 553, 313, 865, 587, 436, 763, 500, 384, 702, 972, 258, 900, 235, 613, 883, 750, 611, 48, 963, 273, 536, 310, 69, 207, 634, 482, 598, 492, 958, 242, 710, 94, 939, 184, 592, 660, 506, 636, 608, 572, 701, 131, 344, 38, 749, 88, 936, 260, 646, 709, 433, 653, 923, 661, 497, 959, 60, 6, 240, 871, 601, 768, 49, 929, 281, 103, 91, 142, 854, 767, 351, 99, 494, 961, 513, 368, 437, 629, 485, 166, 331, 322, 794, 216, 947, 531, 449, 583, 989, 127, 814, 379, 44, 366, 924, 917, 42, 614, 948, 790, 755, 148, 896, 678, 261, 181, 197, 339, 140, 146, 975, 205, 277, 834, 789, 964, 518, 607, 650, 153, 698, 10, 962, 582, 752, 757, 792, 648, 778, 404, 416, 515, 867, 272, 249, 909, 441, 152, 442, 400, 523, 253, 15, 511, 475, 175, 807, 33, 298, 777, 72, 203, 504, 31, 363, 270, 425, 19, 956, 306, 512, 315, 236, 418, 588, 294, 251, 413, 284, 819, 846, 982, 429, 843, 440, 874, 850, 602, 800, 605, 160, 825, 226, 262, 435, 595, 931, 590, 35, 144, 637, 312, 65, 480, 517, 920, 593, 722, 957, 22, 252, 303, 966, 656, 296, 47, 45, 456, 41, 708, 801, 186, 332, 200, 276, 134, 623, 666, 390, 858, 616, 453, 227, 458, 544, 423, 979, 381, 97, 612, 642, 529, 61, 289, 34, 888, 202, 539, 247, 455, 431, 7, 230, 981, 14, 110, 396, 238, 555, 836, 554, 5, 848, 976, 526, 64, 158, 844, 223, 686, 562, 282, 267, 831, 30, 651, 491, 392, 927, 337, 29, 532, 732, 136, 76, 998, 991, 201, 365, 287, 359, 105, 66, 983, 401, 342, 647, 345, 793, 481, 271, 774, 585, 111, 818, 27, 122, 798, 40, 265, 568, 454, 394, 811, 597, 578, 114, 286, 718, 498, 922, 185, 912, 241, 668, 731, 907, 845, 164, 206, 893, 311, 615, 915, 984, 514, 557, 649, 465, 987, 446, 996, 336, 16, 427, 872, 9, 571, 374, 143, 560, 906, 56, 124, 411, 886, 334, 408, 815, 827, 901, 215, 157, 257, 746, 977, 955, 579, 150, 756, 643, 305, 840, 715, 350, 916, 685, 764, 826, 439, 864, 395, 559, 522, 292, 618, 393, 256, 658, 574, 476, 918, 264, 824, 644, 802, 747, 540, 371, 703, 338, 300, 301, 269, 445, 479, 926, 882, 891, 633, 509, 853, 156, 369, 221, 687, 741, 432, 108, 174, 473, 759, 510, 705, 220, 655, 93, 32, 490, 468, 125, 580, 243, 37, 546, 773, 323, 667, 347, 849, 444, 385, 724, 541, 246, 3, 577, 177, 309, 190, 537, 109, 375, 340, 327, 198, 934, 940, 364, 776, 549, 20, 639, 502, 997, 508, 889, 911, 990, 740, 535, 766, 838, 885, 326, 928, 545, 317, 542, 170, 389, 980, 880, 662, 307, 39, 460, 450, 63, 78, 329, 12, 167, 112, 367, 943, 733, 932, 725, 438, 852, 102, 520, 278, 735, 505, 24, 75, 193, 760, 85, 346, 67, 179, 727, 796, 126, 675, 729, 169, 558, 237, 878, 564, 178, 101, 457, 952, 171, 26, 690, 753, 941, 671, 950, 664, 378, 461, 586, 837, 695, 672, 565, 985, 892, 398, 46, 74, 483, 98, 36, 25, 563, 665, 751, 805, 670, 224, 692, 304, 77, 428, 786, 405, 969, 663, 407, 288, 106, 377, 970, 472, 217, 828, 89, 960, 293, 567, 149, 816, 994, 682, 808, 209, 121, 183, 548, 716, 820, 308, 318, 556, 129, 719, 930, 18, 833, 561, 348, 130, 117, 734, 21, 913, 81, 80, 59, 73, 921, 919, 107, 218, 321, 100, 795, 779, 621, 973, 335, 581, 341, 887, 933, 447, 419, 680, 239, 965, 894, 255, 652, 17, 693, 403, 268, 213, 234, 552, 499, 986, 50, 448, 11, 28, 619, 279, 748, 244, 717, 391, 835, 743, 806, 357, 863, 245, 895, 775, 486, 657, 420, 875, 627, 434, 696, 424, 96, 151, 119, 417, 361, 617, 942, 173, 182, 822, 192, 412, 410, 487, 944, 937, 316, 622, 954, 343, 697, 726, 409, 949, 84, 855, 52, 761, 263, 180, 706, 43, 821, 330, 951, 467, 295, 57, 641, 654, 358, 873, 812, 462, 195, 781, 360, 754, 324, 993, 516, 471, 782, 832, 254, 728, 314, 533, 62, 214, 290, 233, 319, 402, 55, 971, 470, 521, 856, 291, 297, 988, 823, 123, 225, 383, 113, 283, 135, 524, 115, 4, 953, 762, 688, 92, 452, 721, 189, 914, 978, 406, 208, 737, 573, 137, 176, 199, 744, 138, 397, 869, 1, 95, 884, 538, 141, 881, 974, 320, 628, 771, 299, 842, 443, 645, 250, 484, 495, 784, 620, 566, 707, 547, 847, 466, 139, 890, 478, 673, 699, 736, 54, 474, 897, 23, 713, 266, 503, 386, 723, 772, 575, 328, 147, 275, 830, 551, 968, 640, 222, 187, 999, 839, 704, 720, 90, 422, 53, 945, 362, 903, 604, 674, 576, 609, 372, 414, 355, 154, 8, 132, 232, 570, 501, 204, 632, 898, 280, 659, 219, 829, 120, 210, 813, 68, 415, 631, 624, 543, 626, 799, 116, 788, 430, 876, 469, 712, 810, 908, 525, 104, 730, 228, 758, 274, 804, 967, 992, 83, 797, 464, 353, 638, 899, 770, 691, 387, 194, 459, 745, 528, 2, 133, 79, 925, 681, 165, 739, 87, 591, 879, 212, 630, 569, 155, 159, 594, 769, 231, 676, 738, 211, 785, 259, 325, 683, 787, 352, 248, 877, 606, 596, 700, 870, 714, 530, 589, 910, 463, 70, 356, 859, 388, 677, 584, 128, 333, 861, 550, 527, 534, 229, 86, 862, 118, 610, 841, 489, 451, 421, 635, 669, 162, 380, 382, 71, 493, 600, 694, 13, 904, 995, 82, 161, 285, 857};
    int location_a[length] = {};
    int b[length];
    int location_b[length];
    int i = 0;
    int j = 0;
    int n  = length;
    int len_seg = 1;
    int Loop = ceil(log2(length));
    int tmp = 0;
    int limit_i,limit_j;
    int flag = 0;
    for(int loop = 0; loop < Loop;loop++){
        for(int itera=0; itera < ceil((float)n/2/len_seg);itera++){
            i = 2*itera*len_seg;
            j = (2*itera+1)*len_seg;
            limit_i = (2*itera+1)*len_seg;
            limit_j = 2*(itera+1)*len_seg;
            if(flag == 0){
                while( i < limit_i & i < length & j < limit_j & j < length ){
                    if(a[i] < a[j]){
                        b[i+j-2*itera*len_seg-len_seg] = a[i];
                        location_b[i+j-2*itera*len_seg-len_seg] = location_a[i];
                        i = i + 1;
                    }
                    else{
                        b[i+j-2*itera*len_seg-len_seg] = a[j];
                        location_b[i+j-2*itera*len_seg-len_seg] = location_a[j];
                        j = j + 1;           
                    }
                }
                while(i < limit_i & i < length){
                    b[i+j-2*itera*len_seg-len_seg] = a[i];
                    location_b[i+j-2*itera*len_seg-len_seg] = location_a[i];
                    i = i + 1;                   
                }
                while(j < limit_j & j < length){
                    b[i+j-2*itera*len_seg-len_seg] = a[j];
                    location_b[i+j-2*itera*len_seg-len_seg] = location_a[j];
                    j = j + 1;                    
                }
            }
            else {
                while( i < limit_i & i < length & j < limit_j & j < length ){
                    if(b[i] < b[j]){
                        a[i+j-2*itera*len_seg-len_seg] = b[i];
                        location_a[i+j-2*itera*len_seg-len_seg] = location_b[i];
                        i = i + 1;
                    }
                    else{
                        a[i+j-2*itera*len_seg-len_seg] = b[j];
                        location_a[i+j-2*itera*len_seg-len_seg] = location_b[j];
                        j = j + 1;           
                    }
                }
                while(i < limit_i & i < length){
                    a[i+j-2*itera*len_seg-len_seg] = b[i];
                    location_a[i+j-2*itera*len_seg-len_seg] = location_b[i];
                    i = i + 1;                   
                }
                while(j < limit_j & j < length){
                    a[i+j-2*itera*len_seg-len_seg] = b[j];
                    location_a[i+j-2*itera*len_seg-len_seg] = location_b[j];
                    j = j + 1;                    
                }                
            }       
        }
        if (flag == 0) flag = 1;
        else flag = 0;
        len_seg = 2 * len_seg;
    }
    std::cout<<"####################"<<std::endl;
    if (Loop % 2 == 0){
        for(i = 0; i < n ; ++i){
            std::cout<<i<<'-'<<a[i]<<'-'<<location_a[i]<<std::endl;
        }
    }

    else{
        for(i = 0; i < n ; ++i){
            std::cout<<i<<'-'<<b[i]<<'-'<<location_b[i]<<std::endl;
        }        
    }
}
